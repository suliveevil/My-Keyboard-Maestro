<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>568075922.90598297</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC5uAAAAKwAAAAEA
						AABmAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNDA0
						XGNvY29hc3VicnRmNDcwCntcZm9u
						dHRibH0Ke1xjb2xvcnRibDtccmVk
						MjU1XGdyZWVuMjU1XGJsdWUyNTU7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAcy6wWbYBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>BBEdit required</string>
					</dict>
					<dict>
						<key>ActionColor</key>
						<string>Aqua</string>
						<key>ActionName</key>
						<string>Macro Notes</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC5tBQAAKwAAAAEA
						AABlBQAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNTA0
						XGNvY29hc3VicnRmODMwCntcZm9u
						dHRibFxmMFxmc3dpc3NcZmNoYXJz
						ZXQwIEhlbHZldGljYTt9CntcY29s
						b3J0Ymw7XHJlZDI1NVxncmVlbjI1
						NVxibHVlMjU1O30Ke1wqXGV4cGFu
						ZGVkY29sb3J0Ymw7O30KXHBhcmRc
						dHg1NjBcdHgxMTIwXHR4MTY4MFx0
						eDIyNDBcdHgyODAwXHR4MzM2MFx0
						eDM5MjBcdHg0NDgwXHR4NTA0MFx0
						eDU2MDBcdHg2MTYwXHR4NjcyMFxw
						YXJkaXJuYXR1cmFsXHBhcnRpZ2h0
						ZW5mYWN0b3IwCgpcZjBcZnMyNCBc
						Y2YwIFwnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wKQXV0
						aG9yCTogIENocmlzdG9waGVyIFN0
						b25lIDxzY3JpcHRtZWlzdGVyQHRo
						ZXN0b25lZm9yZ2UuY29tPlwKQ3Jl
						YXRlZAk6ICAyMDE4LzEyLzI2IDA2
						OjEyXApNb2RpZmllZAk6ICAyMDE4
						LzEyLzI3IDAyOjEwXApUYWdzCQk6
						ICBAY2NzdG9uZSwgQEtNRm9ydW0s
						IEBMaXN0LCBARmluZCwgQE1hY3Jv
						cywgQFN1Yi1NYWNyb3MsIEBTdWJN
						YWNyb3NcClZlcnNpb24JOiAgMS4w
						KGIwMDAyKVwKXCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						XCdiN1wnYjdcJ2I3XCdiN1wnYjdc
						J2I3XCdiN1wnYjdcJ2I3XCdiN1wn
						YjdcJ2I3XCdiN1wnYjdcJ2I3XCdi
						N1wnYjdcJ2I3XCdiN1wnYjdcJ2I3
						fQEAAAAjAAAAAQAAAAcAAABUWFQu
						cnRmEAAAABOJJFy2AQAAAAAAAAAA
						AAA=
						</data>
						<key>Title</key>
						<string>List Keyboard Maestro Macros with Sub-Macros v1.0(b0002)</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>IncludeStdErr</key>
						<false/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteAppleScript</string>
						<key>NotifyOnFailure</key>
						<false/>
						<key>Path</key>
						<string></string>
						<key>StopOnFailure</key>
						<false/>
						<key>Text</key>
						<string>----------------------------------------------------------------
# Auth: Christopher Stone
# dCre: 2018/12/25 15:03
# dMod: 2018/12/27 02:10
# Appl: Keyboard Maestro
# Task: Find macros that use sub-macros and list by name.
# Libs: None
# Osax: None
# Tags: @Applescript, @Script, @Keyboard_Maestro, @Find, @Macros, @Sub-Macros, @SubMacros, @List, @Name
# Vers: 1.0(b0002)
----------------------------------------------------------------
use AppleScript version "2.4"
use framework "Foundation"
use scripting additions
----------------------------------------------------------------

try
	
	tell application "Keyboard Maestro"
		
		set actionList to actions of macros where its xml contains "ExecuteMacro"
		
		try
			
			actionList / 0
			
		on error errorStr
			
			set macroList to errorStr
			set macroList to (my regexFindWithCapture:"?class MKma? id \"[0-9A-Z-]+\"" fromString:macroList resultTemplate:("$0" &amp; " of application \"Keyboard Maestro\""))
			
			set tempList to {}
			
			repeat with i in macroList
				if contents of i is not in tempList then
					set end of tempList to contents of i
				end if
			end repeat
			
			copy tempList to macroList
			
			set macroList to my joinList:macroList usingStr:", "
			set macroList to "{" &amp; macroList &amp; "}"
			set macroList to run script macroList
			
			set tempList to {}
			
			repeat with theMacro in macroList
				
				tell theMacro
					set end of tempList to its name &amp; " ? " &amp; "Macro Group ? " &amp; its macro group's name
					set end of tempList to ""
					set actionXML to (xml of its actions whose xml contains "ExecuteMacro")
					set actionXML to (my joinList:actionXML usingStr:linefeed)
					set uuidList to (my regexFindWithCapture:"&lt;string&gt;ExecuteMacro&lt;/string&gt;\\n\\h*&lt;key&gt;MacroUID&lt;/key&gt;\\n\\h*&lt;string&gt;([0-9A-Z-]+)&lt;/string&gt;" fromString:actionXML resultTemplate:"$1")
					
					repeat with i in uuidList
						set macroName to getMacroNameFromUUID(i) of me
						set end of tempList to tab &amp; "? " &amp; macroName
					end repeat
					
				end tell
				
				set end of tempList to ""
				
			end repeat
			
			set reportStr to my joinList:tempList usingStr:linefeed
			
			bbeditNewDoc(reportStr, "activate") of me
			
		end try
		
	end tell
	
on error e number n
	set e to e &amp; return &amp; return &amp; "Num: " &amp; n
	if n ¡Ù -128 then
		try
			tell application (path to frontmost application as text) to set ddButton to button returned of ?
				(display dialog e with title "ERROR!" buttons {"Copy Error Message", "Cancel", "OK"} ?
					default button "OK" giving up after 30)
			if ddButton = "Copy Error Message" then set the clipboard to e
		end try
	end if
end try

----------------------------------------------------------------
--? HANDLERS
----------------------------------------------------------------
on bbeditNewDoc(_text, _activate)
	tell application "BBEdit"
		set newDoc to make new document with properties {text:_text, bounds:{0, 44, 1920, 1200}}
		tell newDoc
			select insertion point before its text
		end tell
		if _activate = true or _activate = 1 or _activate = "activate" then activate
	end tell
end bbeditNewDoc
----------------------------------------------------------------
on cngStr:findString intoString:replaceString inString:dataString
	set anNSString to current application's NSString's stringWithString:dataString
	set dataString to (anNSString's stringByReplacingOccurrencesOfString:findString withString:replaceString ?
		options:(current application's NSRegularExpressionSearch) range:{0, length of dataString}) as text
end cngStr:intoString:inString:
----------------------------------------------------------------
on getMacroNameFromUUID(macroUUID)
	tell application "Keyboard Maestro Engine"
		return process tokens "%MacroNameForUUID%" &amp; macroUUID &amp; "%"
	end tell
end getMacroNameFromUUID
----------------------------------------------------------------
on joinList:theList usingStr:theStr
	set anNSArray to current application's NSArray's arrayWithArray:theList
	set theString to anNSArray's componentsJoinedByString:theStr
	return theString as text
end joinList:usingStr:
----------------------------------------------------------------
on regexFindWithCapture:thePattern fromString:theString resultTemplate:templateStr
	set theString to current application's NSString's stringWithString:theString
	set theRegEx to current application's NSRegularExpression's regularExpressionWithPattern:thePattern options:0 |error|:(missing value)
	set theFinds to theRegEx's matchesInString:theString options:0 range:{0, theString's |length|()}
	set theResult to current application's NSMutableArray's array()
	
	repeat with aFind in theFinds
		set foundString to (theRegEx's replacementStringForResult:aFind inString:theString |offset|:0 template:templateStr)
		(theResult's addObject:foundString)
	end repeat
	
	return theResult as list
	
end regexFindWithCapture:fromString:resultTemplate:
----------------------------------------------------------------
on splitString:someText withString:mySeparator usingRegex:regexFlag ignoringCase:caseFlag ignoringDiacrits:diacritsFlag
	-- build options
	set theOptions to 0
	if caseFlag then set theOptions to (current application's NSCaseInsensitiveSearch)
	if regexFlag then
		set theOptions to theOptions + (current application's NSRegularExpressionSearch as integer)
	else -- ignoring diacriticals only applies if not doing regex
		if diacritsFlag then set theOptions to theOptions + (current application's NSDiacriticInsensitiveSearch as integer)
	end if
	set theString to current application's NSString's stringWithString:someText
	if theOptions = 0 then -- simplest case: literal, considering case and ignoring diacrits
		set theList to theString's componentsSeparatedByString:mySeparator
	else
		set theList to {} -- to hold strings
		-- get length and set some intital variables
		set theFullLength to theString's |length|()
		set theLength to theFullLength
		set theStart to 0
		repeat
			-- look for range of next match
			set theRange to theString's rangeOfString:mySeparator options:theOptions range:{location:theStart, |length|:theLength}
			if theRange's |length|() = 0 then -- no match found, so grab the whole string then exit repeat
				set end of theList to (theString's substringWithRange:{location:theStart, |length|:theLength}) as text
				exit repeat
			end if
			-- grab the text before the match
			set end of theList to (theString's substringWithRange:{location:theStart, |length|:(location of theRange) - theStart}) as text
			-- reset values for next search
			set theStart to current application's NSMaxRange(theRange) -- straight after the match
			set theLength to theFullLength - theStart
		end repeat
	end if
	return theList as list
end splitString:withString:usingRegex:ignoringCase:ignoringDiacrits:
----------------------------------------------------------------</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>567518867.64675903</real>
				<key>IsActive</key>
				<false/>
				<key>ModificationDate</key>
				<real>574959090.39652395</real>
				<key>Name</key>
				<string>List Keyboard Maestro Macros with Sub-Macros v1.0(b0002)</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>122</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>0</integer>
					</dict>
				</array>
				<key>UID</key>
				<string>A3BF8B0A-56F0-4E33-A35D-7F18CBC05E8C</string>
			</dict>
		</array>
		<key>Name</key>
		<string>1 Application Control</string>
		<key>ToggleMacroUID</key>
		<string>66F83F01-3E0E-40EB-B4F4-B43A41A7BB1B</string>
		<key>UID</key>
		<string>ED84731D-0CAC-4635-A617-B2A2EDCF265D</string>
	</dict>
</array>
</plist>
